Q1> What is JavaScript ?
Ans: Javascript is a programming language which is  used to provide functionality to a normal web page. it is a  programming  language that enable to us  to create
        dynamic content in a normal website. So it is also used to  make dynamic web pages. It is also no known  as ECMAscript.

Q2> What is the use of isNaN function? 
Ans: isNaN() is a function property of the global object. For number values, isNaN() tests if the number is the value NaN . When the argument to the isNaN() function
        is not of type Number, the value is first coerced to a number, and the resulting value is then compared against NaN .  
        Syntax:  isNaN(value)     

Q3> What is negative Infinity?
Ans: The negative infinity in JavaScript is a constant value that is used to represent a value that is the lowest available. This means that no other number is lesser than 
        this value. It can be generated using a self-made function or by an arithmetic operation. 
        Negative infinity is different from mathematical infinity in the following ways:
        Negative infinity results in -0(different from 0 ) when divided by any other number.
        When divided by itself or positive infinity, negative infinity return NaN
        Negative infinity, when divided by any positive number (apart from positive infinity) is negative infinity.
        Negative infinity, divided by any negative number (apart from negative infinity) is positive infinity.
        If we multiply negative infinity with NaN, we will get NaN as a result.
        The product of 0 and negative infinity is Nan.
        The product of two negative infinities is always a positive infinity.
        The product of both positive and negative infinity is always negative infinity.
        Syntax: 
        Number.NEGATIVE_INFINITY

Q4> Which company developed JavaScript?
Ans: The first JavaScript engine was created by Brendan Eich at Netscape, for the Netscape Navigator Web browser. The engine, code-named SpiderMonkey, is 
        implemented in C. It has since been updated (in JavaScript 1.5) to conform to ECMAScript 3.

Q5> What are undeclared and undefined variables?
Ans: Undefined: It occurs when a variable has been declared but has not been assigned with any value. Undefined is not a keyword.

       Undeclared: It occurs when we try to access any variable that is not initialized or declared earlier using var or const keyword. If we use ‘typeof’ operator to get the
                          value of an undeclared variable, we will face the runtime error with return value as “undefined”. The scope of the undeclared variables is always global.

Q6> Write the code for adding new elements dynamically? 
Ans: Syntax:

      document.createElement("<tagName>");  
      // Where <tagName> can be any HTML 
      // tagName like div, ul, button, etc.

      // newDiv element has been created
      For Eg: let newDiv = document.createElement("div");

Q7> What is the difference between ViewState and SessionState?
Ans: ViewState: It is maintained at only one level that is page-level. Changes made on a single page is not visible on other pages. Information that is gathered in view state
                         is stored for the clients only and cannot be transferred to any other place. View state is synonymous with serializable data only.
                         ViewState has a tendency for the persistence of page-instance-specific data. When view state is used, the values posted of a particular page persist in the 
                         browse area that the client is using and post back only when the entire operation is done. The data of the previous page is no longer available when another
                         page is loaded. Also, Data is not secure in this case because it is exposed to clients. Encryption can be used for data security.

       SessionState: It is maintained at session-level and data can be accessed across all pages in the web application. The information is stored within the server and can be 
                            accessed by any person that has access to the server where the information is stored.
                            SessionState has the tendency for the persistence of user-specific data and is maintained on the server-side. This data remains available until the time that
                            the session is completed or the browser is closed by the user. The session state is only valid for type objects.

Q8> What is === operator?
Ans: === (Triple equals) is a strict equality comparison operator in JavaScript, which returns false for the values which are not of a similar type. This operator performs
        type casting for equality. If we compare 2 with “2” using ===, then it will return a false value.

Q9> How can the style/class of an element be changed?
Ans: .getElementById() method is used to return the element in the document with the “id” attribute and the “className” attribute can be used to change/append the class
         of the element.
         Syntax:  

        document.getElementById('myElement').className = "myclass";

Q10> How to read and write a file using JavaScript? 
Ans:   The fs.readFile() and rs.writeFile() methods are used to read and write of a file using javascript. The file is read using the fs.readFile() function, which is an inbuilt
          method. This technique reads the full file into memory and stores it in a buffer. 
          Syntax:
          fs.readFile( file_name, encoding, callback_function )
         
         The fs.writeFile() function is used to write data to a file in an asynchronous manner. If the file already exists, it will be replaced.
         Syntax:
         fs.writeFile( file_name, data, options, callback )

Q11> What are all the looping structures in JavaScript?
Ans:   JavaScript supports different kinds of loops:
          for - loops through a block of code a number of times
          for/in - loops through the properties of an object
          for/of - loops through the values of an iterable object
         while - loops through a block of code while a specified condition is true
         do/while - also loops through a block of code while a specified condition is true.

Q12> How can you convert the string of any base to an integer in JavaScript?  
Ans:   In JavaScript parseInt() function (or a method) is used to convert the passed-in string parameter or value to an integer value itself.
          This function returns an integer of the base which is specified in the second argument of the parseInt() function. JavaScript parseInt() 
          function returns Nan( not a number) when the string doesn’t contain a number. 
          Syntax:
          parseInt(Value, radix)

Q13> What is the function of the delete operator? 
Ans:   The delete operator removes a property from an object. If the property's value is an object and there are no more references to the object,
          the object held by that  property is eventually released automatically.
          Syntax:
         delete object.property
         delete object[property]
         Parameters
         object:
         The name of an object, or an expression evaluating to an object.
         property :
         The property to delete.

Q14> What are all the types of Pop up boxes available in JavaScript? 
Ans:   In Javascript, popup boxes are used to display the message or notification to the user. There are three types of pop-up boxes in JavaScript namely Alert Box,
         Confirm Box and Prompt Box.

Q15>What is the use of Void (0)?
Ans:  JavaScript void 0 means returning undefined (void) as a primitive value. You might come across the term “JavaScript:void(0)” while going through 
         documents. It is used to prevent any side effects caused while inserting an expression in a web page.

Q16>How can a page be forced to load another page in JavaScript? 
Ans:  We can use window.location property inside the script tag to forcefully load another page in Javascript. It is a reference to a Location object that is it represents
         the current location of the document. We can change the URL of a window by accessing it.
         Syntax:
        <script>
        window.location = <Path / URL>
        </script>

Q17> What are the disadvantages of using innerHTML in JavaScript? 
Ans:   Disadvantages of using innerHTML property in JavaScript:
         The use of innerHTML very slow: The process of using innerHTML is much slower as its contents as slowly built, also already parsed contents and elements are also 
                                                              re-parsed which takes time.Preserves event handlers attached to any DOM elements: The event handlers do not get attached to the 
                                                              new elements created by setting innerHTML automatically. To do so one has to keep track of the event handlers and attach it to new
                                                              elements manually. This may cause a memory leak on some browsers.
         Content is replaced everywhere: Either you add, append, delete or modify contents on a webpage using innerHTML, all contents is replaced, also all the DOM nodes 
                                                            inside that element are reparsed and recreated.
         Appending to innerHTML is not supported: Usually, += is used for appending in JavaScript. But on appending to an Html tag using innerHTML, the whole tag is 
                                                                             re-parsed.
         Old content replaced issue: The old content is replaced even if object.innerHTML = object.innerHTML + ‘html’ is used instead of object.innerHTML += ‘html’. There
                                                     is no way of appending without reparsing the whole innerHTML. Therefore, working with innerHTML becomes very slow. String concaten
                                                     ation just does not scale when dynamic DOM elements need to be created as the plus’ and quote openings and closings becomes difficult to
                                                     track.Can break the document: There is no proper validation provided by innerHTML, so any valid HTML code can be used. This may 
                                                     break the document of JavaScript. Even broken HTML can be used, which may lead to unexpected problems.
         Can also be used for Cross-site Scripting(XSS): The fact that innerHTML can add text and elements to the webpage, can easily be used by malicious users to
                                                                                   manipulate and display undesirable or harmful elements within other HTML element tags. Cross-site Scripting may 
                                                                                   also lead to loss, leak and change of sensitive information.